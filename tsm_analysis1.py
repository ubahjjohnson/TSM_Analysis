# -*- coding: utf-8 -*-
"""TSM_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fDEZQOIvrCjgCCWXktbn2OruvRD4EmKF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.ticker as mtick

# Load the TSM Perception Measures data
df = pd.read_excel('TSM Perception Measures data.xlsx')

# Rename columns for clarity
df = df.rename(columns={
    'Unnamed: 0': 'Code',
    'Unnamed: 1': 'Measure',
    'Q1 24/25': 'Q1',
    'Q2 24/25': 'Q2',
    'Q3 24/25': 'Q3',
    'Q4 24/25': 'Q4',
    '24/25 End of Year ': 'Year_End',
    'Internal Target': 'Target',
    'external benchmark': 'Benchmark',
    '23/24 End of Year ': 'Previous_Year'
})

# Display the cleaned dataframe
print("TSM Perception Measures Data:")
print(df)

# Check for missing values
print("\nMissing values in each column:")
print(df.isna().sum())

# Basic statistics for the perception measures
print("\nBasic statistics for the perception measures:")
numeric_cols = ['Q1', 'Q2', 'Q3', 'Q4', 'Year_End', 'Target', 'Previous_Year']
print(df[numeric_cols].describe())

# Calculate year-over-year change
df['YoY_Change'] = df['Year_End'] - df['Previous_Year']
df['YoY_Change_Pct'] = (df['YoY_Change'] / df['Previous_Year']) * 100

# Calculate target achievement
df['Target_Gap'] = df['Year_End'] - df['Target']
df['Target_Achievement_Pct'] = (df['Year_End'] / df['Target']) * 100

# Calculate quarterly trends
df['Q1_to_Q2_Change'] = df['Q2'] - df['Q1']
df['Q2_to_Q3_Change'] = df['Q3'] - df['Q2']
df['Q3_to_Q4_Change'] = df['Q4'] - df['Q3']
df['Q1_to_Q4_Change'] = df['Q4'] - df['Q1']

# Identify measures with significant improvements or declines
significant_change_threshold = 0.05  # 5% change
df['Significant_YoY_Change'] = np.abs(df['YoY_Change']) > significant_change_threshold
df['Significant_Q1_Q4_Change'] = np.abs(df['Q1_to_Q4_Change']) > significant_change_threshold

# Identify measures performing above or below target
df['Above_Target'] = df['Year_End'] >= df['Target']
df['Target_Gap_Significant'] = np.abs(df['Target_Gap']) > 0.05

# Display measures with significant year-over-year changes
print("\nMeasures with significant year-over-year changes:")
significant_yoy = df[df['Significant_YoY_Change']]
print(significant_yoy[['Code', 'Measure', 'Previous_Year', 'Year_End', 'YoY_Change', 'YoY_Change_Pct']])

# Display measures with significant quarterly changes (Q1 to Q4)
print("\nMeasures with significant quarterly changes (Q1 to Q4):")
significant_quarterly = df[df['Significant_Q1_Q4_Change']]
print(significant_quarterly[['Code', 'Measure', 'Q1', 'Q4', 'Q1_to_Q4_Change']])

# Display measures relative to targets
print("\nMeasures relative to targets:")
print(df[['Code', 'Measure', 'Year_End', 'Target', 'Target_Gap', 'Target_Achievement_Pct', 'Above_Target']])

# Identify top and bottom performing measures
print("\nTop 3 performing measures (by Year End score):")
top_measures = df.nlargest(3, 'Year_End')
print(top_measures[['Code', 'Measure', 'Year_End']])

print("\nBottom 3 performing measures (by Year End score):")
bottom_measures = df.nsmallest(3, 'Year_End')
print(bottom_measures[['Code', 'Measure', 'Year_End']])

# Identify measures with the most improvement
print("\nTop 3 most improved measures (year-over-year):")
most_improved = df.nlargest(3, 'YoY_Change')
print(most_improved[['Code', 'Measure', 'Previous_Year', 'Year_End', 'YoY_Change', 'YoY_Change_Pct']])

print("\nTop 3 most declined measures (year-over-year):")
most_declined = df.nsmallest(3, 'YoY_Change')
print(most_declined[['Code', 'Measure', 'Previous_Year', 'Year_End', 'YoY_Change', 'YoY_Change_Pct']])

# Calculate overall average satisfaction
overall_avg = df['Year_End'].mean()
print(f"\nOverall average satisfaction across all measures: {overall_avg:.4f}")

# Calculate quarterly averages to see overall trends
quarterly_avgs = {
    'Q1': df['Q1'].mean(),
    'Q2': df['Q2'].mean(),
    'Q3': df['Q3'].mean(),
    'Q4': df['Q4'].mean()
}
print("\nQuarterly average satisfaction across all measures:")
for quarter, avg in quarterly_avgs.items():
    print(f"{quarter}: {avg:.4f}")

# Group measures into categories for thematic analysis
# These groupings are based on the nature of the questions
df['Category'] = 'Other'
df.loc[df['Code'].isin(['TP01']), 'Category'] = 'Overall Satisfaction'
df.loc[df['Code'].isin(['TP02', 'TP03', 'TP04', 'TP05']), 'Category'] = 'Home & Repairs'
df.loc[df['Code'].isin(['TP06', 'TP07', 'TP08']), 'Category'] = 'Communication & Respect'
df.loc[df['Code'].isin(['TP09', 'TP12']), 'Category'] = 'Complaint Handling'
df.loc[df['Code'].isin(['TP10', 'TP11']), 'Category'] = 'Community & Neighborhood'

# Calculate category averages
category_avgs = df.groupby('Category')['Year_End'].mean().sort_values(ascending=False)
print("\nAverage satisfaction by category:")
print(category_avgs)

# Visualize the data

# Set a consistent style for all plots
plt.style.use('seaborn-v0_8-whitegrid')
custom_colors = ["#4e79a7", "#f28e2c", "#e15759", "#76b7b2", "#59a14f", "#edc949"]
custom_cmap = LinearSegmentedColormap.from_list("custom_cmap", custom_colors)
plt.rcParams['font.family'] = 'sans-serif'
plt.rcParams['font.sans-serif'] = ['Arial', 'Helvetica', 'DejaVu Sans']
plt.rcParams['figure.figsize'] = (12, 8)

# 1. Year-End Performance vs Target
plt.figure(figsize=(12, 8))
measures = df['Measure'].str.slice(0, 30)  # Truncate long measure names
x = np.arange(len(measures))
width = 0.35

fig, ax = plt.subplots(figsize=(14, 8))
rects1 = ax.bar(x - width/2, df['Year_End'], width, label='Year End 24/25', color='#4e79a7')
rects2 = ax.bar(x + width/2, df['Target'], width, label='Internal Target', color='#f28e2c')

# Add previous year as markers
ax.scatter(x, df['Previous_Year'], color='#e15759', s=50, label='Year End 23/24')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Satisfaction Score', fontsize=12)
ax.set_title('TSM Perception Measures: Year-End Performance vs Target', fontsize=14, fontweight='bold')
ax.set_xticks(x)
ax.set_xticklabels(measures, rotation=45, ha='right', fontsize=10)
ax.legend(fontsize=10)
ax.grid(axis='y', linestyle='--', alpha=0.7)
ax.set_ylim(0, 1.0)
ax.yaxis.set_major_formatter(mtick.PercentFormatter(1.0))

# Add value labels on bars
def add_labels(rects):
    for rect in rects:
        height = rect.get_height()
        ax.annotate(f'{height:.2f}',
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom',
                    fontsize=8)

add_labels(rects1)
add_labels(rects2)

plt.tight_layout()
plt.savefig('year_end_vs_target.png', dpi=300, bbox_inches='tight')

# 2. Year-over-Year Change
plt.figure(figsize=(12, 8))
colors = ['#4e79a7' if x >= 0 else '#e15759' for x in df['YoY_Change']]
plt.bar(measures, df['YoY_Change'], color=colors)
plt.axhline(y=0, color='black', linestyle='-', alpha=0.3)
plt.ylabel('Change in Satisfaction Score', fontsize=12)
plt.title('Year-over-Year Change in TSM Perception Measures', fontsize=14, fontweight='bold')
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Add value labels
for i, v in enumerate(df['YoY_Change']):
    plt.text(i, v + (0.01 if v >= 0 else -0.02),
             f'{v:.3f}',
             ha='center', va='bottom' if v >= 0 else 'top',
             fontsize=9)

plt.tight_layout()
plt.savefig('year_over_year_change.png', dpi=300, bbox_inches='tight')

# 3. Quarterly Trends
plt.figure(figsize=(14, 8))
quarters = ['Q1', 'Q2', 'Q3', 'Q4']
for i, row in df.iterrows():
    plt.plot(quarters, [row['Q1'], row['Q2'], row['Q3'], row['Q4']],
             marker='o', linewidth=2, label=row['Code'])

plt.ylabel('Satisfaction Score', fontsize=12)
plt.title('Quarterly Trends in TSM Perception Measures', fontsize=14, fontweight='bold')
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=10)
plt.ylim(0.2, 0.9)
plt.tight_layout()
plt.savefig('quarterly_trends.png', dpi=300, bbox_inches='tight')

# 4. Category Performance
plt.figure(figsize=(12, 6))
category_avgs.plot(kind='bar', color=custom_colors)
plt.ylabel('Average Satisfaction Score', fontsize=12)
plt.title('Average Satisfaction by Category', fontsize=14, fontweight='bold')
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.ylim(0, 1.0)
plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(1.0))

# Add value labels
for i, v in enumerate(category_avgs):
    plt.text(i, v + 0.01, f'{v:.2f}', ha='center', fontsize=10)

plt.tight_layout()
plt.savefig('category_performance.png', dpi=300, bbox_inches='tight')

# 5. Heatmap of quarterly performance
plt.figure(figsize=(14, 10))
quarterly_data = df[['Code', 'Q1', 'Q2', 'Q3', 'Q4']].set_index('Code')
sns.heatmap(quarterly_data, annot=True, cmap=custom_cmap, fmt='.3f',
            linewidths=.5, cbar_kws={'label': 'Satisfaction Score'})
plt.title('Quarterly Performance Heatmap', fontsize=14, fontweight='bold')
plt.tight_layout()
plt.savefig('quarterly_heatmap.png', dpi=300, bbox_inches='tight')

# 6. Target Achievement
plt.figure(figsize=(12, 8))
colors = ['#4e79a7' if x >= 100 else '#e15759' for x in df['Target_Achievement_Pct']]
plt.bar(measures, df['Target_Achievement_Pct'], color=colors)
plt.axhline(y=100, color='black', linestyle='-', alpha=0.3, label='Target (100%)')
plt.ylabel('Target Achievement (%)', fontsize=12)
plt.title('Target Achievement for TSM Perception Measures', fontsize=14, fontweight='bold')
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.legend()

# Add value labels
for i, v in enumerate(df['Target_Achievement_Pct']):
    plt.text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom', fontsize=9)

plt.tight_layout()
plt.savefig('target_achievement.png', dpi=300, bbox_inches='tight')

print("\nAnalysis complete. Visualizations saved.")

# Export the enhanced dataframe to Excel for further reference
df.to_excel('TSM_Analysis_Results.xlsx', index=False)
print("Enhanced data exported to 'TSM_Analysis_Results.xlsx'")# 4. Category Performance
plt.figure(figsize=(12, 6))
category_avgs.plot(kind='bar', color=custom_colors)
plt.ylabel('Average Satisfaction Score', fontsize=12)
plt.title('Average Satisfaction by Category', fontsize=14, fontweight='bold')
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.ylim(0, 1.0)
plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter(1.0))

# Add value labels
for i, v in enumerate(category_avgs):
    plt.text(i, v + 0.01, f'{v:.2f}', ha='center', fontsize=10)

plt.tight_layout()
plt.savefig('category_performance.png', dpi=300, bbox_inches='tight')